// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIDataMetadata api data metadata
//
// swagger:model apiDataMetadata
type APIDataMetadata struct {

	// ts when the record was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"CreatedAt,omitempty"`

	// ts when the record was deleted
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"DeletedAt,omitempty"`

	// collectionId is collection id from collection data
	CollectionID string `json:"collectionId,omitempty"`

	// dataformat
	Dataformat *APIDataFormat `json:"dataformat,omitempty"`

	// did (aka dataid) would be used to naming ${documentId} field, that field should be url safe
	DocumentID string `json:"documentId,omitempty"`

	// projectId is project id
	ProjectID string `json:"projectId,omitempty"`

	// schemaId is the schema index stored in collection
	SchemaID string `json:"schemaId,omitempty"`
}

// Validate validates this api data metadata
func (m *APIDataMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataformat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIDataMetadata) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIDataMetadata) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("DeletedAt", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIDataMetadata) validateDataformat(formats strfmt.Registry) error {
	if swag.IsZero(m.Dataformat) { // not required
		return nil
	}

	if m.Dataformat != nil {
		if err := m.Dataformat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataformat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataformat")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api data metadata based on the context it is used
func (m *APIDataMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataformat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIDataMetadata) contextValidateDataformat(ctx context.Context, formats strfmt.Registry) error {

	if m.Dataformat != nil {

		if swag.IsZero(m.Dataformat) { // not required
			return nil
		}

		if err := m.Dataformat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataformat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataformat")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIDataMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIDataMetadata) UnmarshalBinary(b []byte) error {
	var res APIDataMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
