// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// APISchemaFieldDataType api schema field data type
//
// swagger:model apiSchemaFieldDataType
type APISchemaFieldDataType string

func NewAPISchemaFieldDataType(value APISchemaFieldDataType) *APISchemaFieldDataType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated APISchemaFieldDataType.
func (m APISchemaFieldDataType) Pointer() *APISchemaFieldDataType {
	return &m
}

const (

	// APISchemaFieldDataTypeSCHEMAFIELDDATATYPENONE captures enum value "SCHEMA_FIELD_DATA_TYPE_NONE"
	APISchemaFieldDataTypeSCHEMAFIELDDATATYPENONE APISchemaFieldDataType = "SCHEMA_FIELD_DATA_TYPE_NONE"

	// APISchemaFieldDataTypeSCHEMAFIELDDATATYPESTRING captures enum value "SCHEMA_FIELD_DATA_TYPE_STRING"
	APISchemaFieldDataTypeSCHEMAFIELDDATATYPESTRING APISchemaFieldDataType = "SCHEMA_FIELD_DATA_TYPE_STRING"

	// APISchemaFieldDataTypeSCHEMAFIELDDATATYPENUMBER captures enum value "SCHEMA_FIELD_DATA_TYPE_NUMBER"
	APISchemaFieldDataTypeSCHEMAFIELDDATATYPENUMBER APISchemaFieldDataType = "SCHEMA_FIELD_DATA_TYPE_NUMBER"

	// APISchemaFieldDataTypeSCHEMAFIELDDATATYPEINTEGER captures enum value "SCHEMA_FIELD_DATA_TYPE_INTEGER"
	APISchemaFieldDataTypeSCHEMAFIELDDATATYPEINTEGER APISchemaFieldDataType = "SCHEMA_FIELD_DATA_TYPE_INTEGER"

	// APISchemaFieldDataTypeSCHEMAFIELDDATATYPEBOOL captures enum value "SCHEMA_FIELD_DATA_TYPE_BOOL"
	APISchemaFieldDataTypeSCHEMAFIELDDATATYPEBOOL APISchemaFieldDataType = "SCHEMA_FIELD_DATA_TYPE_BOOL"
)

// for schema
var apiSchemaFieldDataTypeEnum []interface{}

func init() {
	var res []APISchemaFieldDataType
	if err := json.Unmarshal([]byte(`["SCHEMA_FIELD_DATA_TYPE_NONE","SCHEMA_FIELD_DATA_TYPE_STRING","SCHEMA_FIELD_DATA_TYPE_NUMBER","SCHEMA_FIELD_DATA_TYPE_INTEGER","SCHEMA_FIELD_DATA_TYPE_BOOL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiSchemaFieldDataTypeEnum = append(apiSchemaFieldDataTypeEnum, v)
	}
}

func (m APISchemaFieldDataType) validateAPISchemaFieldDataTypeEnum(path, location string, value APISchemaFieldDataType) error {
	if err := validate.EnumCase(path, location, value, apiSchemaFieldDataTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this api schema field data type
func (m APISchemaFieldDataType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAPISchemaFieldDataTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this api schema field data type based on context it is used
func (m APISchemaFieldDataType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
