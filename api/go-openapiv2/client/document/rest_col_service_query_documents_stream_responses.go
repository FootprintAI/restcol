// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/footprintai/restcol/api/go-openapiv2/models"
)

// RestColServiceQueryDocumentsStreamReader is a Reader for the RestColServiceQueryDocumentsStream structure.
type RestColServiceQueryDocumentsStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestColServiceQueryDocumentsStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRestColServiceQueryDocumentsStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRestColServiceQueryDocumentsStreamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRestColServiceQueryDocumentsStreamOK creates a RestColServiceQueryDocumentsStreamOK with default headers values
func NewRestColServiceQueryDocumentsStreamOK() *RestColServiceQueryDocumentsStreamOK {
	return &RestColServiceQueryDocumentsStreamOK{}
}

/*
RestColServiceQueryDocumentsStreamOK describes a response with status code 200, with default header values.

A successful response.(streaming responses)
*/
type RestColServiceQueryDocumentsStreamOK struct {
	Payload *RestColServiceQueryDocumentsStreamOKBody
}

// IsSuccess returns true when this rest col service query documents stream o k response has a 2xx status code
func (o *RestColServiceQueryDocumentsStreamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rest col service query documents stream o k response has a 3xx status code
func (o *RestColServiceQueryDocumentsStreamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rest col service query documents stream o k response has a 4xx status code
func (o *RestColServiceQueryDocumentsStreamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rest col service query documents stream o k response has a 5xx status code
func (o *RestColServiceQueryDocumentsStreamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rest col service query documents stream o k response a status code equal to that given
func (o *RestColServiceQueryDocumentsStreamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rest col service query documents stream o k response
func (o *RestColServiceQueryDocumentsStreamOK) Code() int {
	return 200
}

func (o *RestColServiceQueryDocumentsStreamOK) Error() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/docs:stream][%d] restColServiceQueryDocumentsStreamOK  %+v", 200, o.Payload)
}

func (o *RestColServiceQueryDocumentsStreamOK) String() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/docs:stream][%d] restColServiceQueryDocumentsStreamOK  %+v", 200, o.Payload)
}

func (o *RestColServiceQueryDocumentsStreamOK) GetPayload() *RestColServiceQueryDocumentsStreamOKBody {
	return o.Payload
}

func (o *RestColServiceQueryDocumentsStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RestColServiceQueryDocumentsStreamOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestColServiceQueryDocumentsStreamDefault creates a RestColServiceQueryDocumentsStreamDefault with default headers values
func NewRestColServiceQueryDocumentsStreamDefault(code int) *RestColServiceQueryDocumentsStreamDefault {
	return &RestColServiceQueryDocumentsStreamDefault{
		_statusCode: code,
	}
}

/*
RestColServiceQueryDocumentsStreamDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type RestColServiceQueryDocumentsStreamDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this rest col service query documents stream default response has a 2xx status code
func (o *RestColServiceQueryDocumentsStreamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this rest col service query documents stream default response has a 3xx status code
func (o *RestColServiceQueryDocumentsStreamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this rest col service query documents stream default response has a 4xx status code
func (o *RestColServiceQueryDocumentsStreamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this rest col service query documents stream default response has a 5xx status code
func (o *RestColServiceQueryDocumentsStreamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this rest col service query documents stream default response a status code equal to that given
func (o *RestColServiceQueryDocumentsStreamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the rest col service query documents stream default response
func (o *RestColServiceQueryDocumentsStreamDefault) Code() int {
	return o._statusCode
}

func (o *RestColServiceQueryDocumentsStreamDefault) Error() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/docs:stream][%d] RestColService_QueryDocumentsStream default  %+v", o._statusCode, o.Payload)
}

func (o *RestColServiceQueryDocumentsStreamDefault) String() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/docs:stream][%d] RestColService_QueryDocumentsStream default  %+v", o._statusCode, o.Payload)
}

func (o *RestColServiceQueryDocumentsStreamDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *RestColServiceQueryDocumentsStreamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
RestColServiceQueryDocumentsStreamOKBody Stream result of apiGetDocumentResponse
swagger:model RestColServiceQueryDocumentsStreamOKBody
*/
type RestColServiceQueryDocumentsStreamOKBody struct {

	// error
	Error *models.RPCStatus `json:"error,omitempty"`

	// result
	Result *models.APIGetDocumentResponse `json:"result,omitempty"`
}

// Validate validates this rest col service query documents stream o k body
func (o *RestColServiceQueryDocumentsStreamOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RestColServiceQueryDocumentsStreamOKBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *RestColServiceQueryDocumentsStreamOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rest col service query documents stream o k body based on the context it is used
func (o *RestColServiceQueryDocumentsStreamOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RestColServiceQueryDocumentsStreamOKBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *RestColServiceQueryDocumentsStreamOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {

		if swag.IsZero(o.Result) { // not required
			return nil
		}

		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restColServiceQueryDocumentsStreamOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RestColServiceQueryDocumentsStreamOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RestColServiceQueryDocumentsStreamOKBody) UnmarshalBinary(b []byte) error {
	var res RestColServiceQueryDocumentsStreamOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
