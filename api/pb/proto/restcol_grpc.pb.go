// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/restcol.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RestColService_GetSwaggerDoc_FullMethodName        = "/restcol.api.RestColService/GetSwaggerDoc"
	RestColService_CreateCollection_FullMethodName     = "/restcol.api.RestColService/CreateCollection"
	RestColService_ListCollections_FullMethodName      = "/restcol.api.RestColService/ListCollections"
	RestColService_GetCollection_FullMethodName        = "/restcol.api.RestColService/GetCollection"
	RestColService_DeleteCollection_FullMethodName     = "/restcol.api.RestColService/DeleteCollection"
	RestColService_CreateDocument_FullMethodName       = "/restcol.api.RestColService/CreateDocument"
	RestColService_GetDocument_FullMethodName          = "/restcol.api.RestColService/GetDocument"
	RestColService_DeleteDocument_FullMethodName       = "/restcol.api.RestColService/DeleteDocument"
	RestColService_QueryDocumentsStream_FullMethodName = "/restcol.api.RestColService/QueryDocumentsStream"
	RestColService_QueryDocument_FullMethodName        = "/restcol.api.RestColService/QueryDocument"
)

// RestColServiceClient is the client API for RestColService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestColServiceClient interface {
	GetSwaggerDoc(ctx context.Context, in *GetSwaggerDocRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
	CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error)
	// GetDocument endpoint is a generic endpoint for retrieving data across multiple collections
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// DeleteDocument endpoint is a generic endpoint for deleting a specific data
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	QueryDocumentsStream(ctx context.Context, in *QueryDocumentStreamRequest, opts ...grpc.CallOption) (RestColService_QueryDocumentsStreamClient, error)
	QueryDocument(ctx context.Context, in *QueryDocumentRequest, opts ...grpc.CallOption) (*QueryDocumentResponse, error)
}

type restColServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestColServiceClient(cc grpc.ClientConnInterface) RestColServiceClient {
	return &restColServiceClient{cc}
}

func (c *restColServiceClient) GetSwaggerDoc(ctx context.Context, in *GetSwaggerDocRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, RestColService_GetSwaggerDoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, RestColService_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, RestColService_ListCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, RestColService_GetCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	out := new(DeleteCollectionResponse)
	err := c.cc.Invoke(ctx, RestColService_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error) {
	out := new(CreateDocumentResponse)
	err := c.cc.Invoke(ctx, RestColService_CreateDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, RestColService_GetDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, RestColService_DeleteDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColServiceClient) QueryDocumentsStream(ctx context.Context, in *QueryDocumentStreamRequest, opts ...grpc.CallOption) (RestColService_QueryDocumentsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RestColService_ServiceDesc.Streams[0], RestColService_QueryDocumentsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &restColServiceQueryDocumentsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RestColService_QueryDocumentsStreamClient interface {
	Recv() (*GetDocumentResponse, error)
	grpc.ClientStream
}

type restColServiceQueryDocumentsStreamClient struct {
	grpc.ClientStream
}

func (x *restColServiceQueryDocumentsStreamClient) Recv() (*GetDocumentResponse, error) {
	m := new(GetDocumentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *restColServiceClient) QueryDocument(ctx context.Context, in *QueryDocumentRequest, opts ...grpc.CallOption) (*QueryDocumentResponse, error) {
	out := new(QueryDocumentResponse)
	err := c.cc.Invoke(ctx, RestColService_QueryDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestColServiceServer is the server API for RestColService service.
// All implementations must embed UnimplementedRestColServiceServer
// for forward compatibility
type RestColServiceServer interface {
	GetSwaggerDoc(context.Context, *GetSwaggerDocRequest) (*httpbody.HttpBody, error)
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error)
	CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error)
	// GetDocument endpoint is a generic endpoint for retrieving data across multiple collections
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// DeleteDocument endpoint is a generic endpoint for deleting a specific data
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	QueryDocumentsStream(*QueryDocumentStreamRequest, RestColService_QueryDocumentsStreamServer) error
	QueryDocument(context.Context, *QueryDocumentRequest) (*QueryDocumentResponse, error)
	mustEmbedUnimplementedRestColServiceServer()
}

// UnimplementedRestColServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRestColServiceServer struct {
}

func (UnimplementedRestColServiceServer) GetSwaggerDoc(context.Context, *GetSwaggerDocRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwaggerDoc not implemented")
}
func (UnimplementedRestColServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedRestColServiceServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedRestColServiceServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedRestColServiceServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedRestColServiceServer) CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedRestColServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedRestColServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedRestColServiceServer) QueryDocumentsStream(*QueryDocumentStreamRequest, RestColService_QueryDocumentsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryDocumentsStream not implemented")
}
func (UnimplementedRestColServiceServer) QueryDocument(context.Context, *QueryDocumentRequest) (*QueryDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDocument not implemented")
}
func (UnimplementedRestColServiceServer) mustEmbedUnimplementedRestColServiceServer() {}

// UnsafeRestColServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestColServiceServer will
// result in compilation errors.
type UnsafeRestColServiceServer interface {
	mustEmbedUnimplementedRestColServiceServer()
}

func RegisterRestColServiceServer(s grpc.ServiceRegistrar, srv RestColServiceServer) {
	s.RegisterService(&RestColService_ServiceDesc, srv)
}

func _RestColService_GetSwaggerDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwaggerDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).GetSwaggerDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_GetSwaggerDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).GetSwaggerDoc(ctx, req.(*GetSwaggerDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_ListCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_CreateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).CreateDocument(ctx, req.(*CreateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColService_QueryDocumentsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryDocumentStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RestColServiceServer).QueryDocumentsStream(m, &restColServiceQueryDocumentsStreamServer{stream})
}

type RestColService_QueryDocumentsStreamServer interface {
	Send(*GetDocumentResponse) error
	grpc.ServerStream
}

type restColServiceQueryDocumentsStreamServer struct {
	grpc.ServerStream
}

func (x *restColServiceQueryDocumentsStreamServer) Send(m *GetDocumentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RestColService_QueryDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColServiceServer).QueryDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColService_QueryDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColServiceServer).QueryDocument(ctx, req.(*QueryDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestColService_ServiceDesc is the grpc.ServiceDesc for RestColService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestColService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restcol.api.RestColService",
	HandlerType: (*RestColServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSwaggerDoc",
			Handler:    _RestColService_GetSwaggerDoc_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _RestColService_CreateCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _RestColService_ListCollections_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _RestColService_GetCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _RestColService_DeleteCollection_Handler,
		},
		{
			MethodName: "CreateDocument",
			Handler:    _RestColService_CreateDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _RestColService_GetDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _RestColService_DeleteDocument_Handler,
		},
		{
			MethodName: "QueryDocument",
			Handler:    _RestColService_QueryDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryDocumentsStream",
			Handler:       _RestColService_QueryDocumentsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/restcol.proto",
}
