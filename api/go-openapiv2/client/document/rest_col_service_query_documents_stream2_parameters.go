// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRestColServiceQueryDocumentsStream2Params creates a new RestColServiceQueryDocumentsStream2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRestColServiceQueryDocumentsStream2Params() *RestColServiceQueryDocumentsStream2Params {
	return &RestColServiceQueryDocumentsStream2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewRestColServiceQueryDocumentsStream2ParamsWithTimeout creates a new RestColServiceQueryDocumentsStream2Params object
// with the ability to set a timeout on a request.
func NewRestColServiceQueryDocumentsStream2ParamsWithTimeout(timeout time.Duration) *RestColServiceQueryDocumentsStream2Params {
	return &RestColServiceQueryDocumentsStream2Params{
		timeout: timeout,
	}
}

// NewRestColServiceQueryDocumentsStream2ParamsWithContext creates a new RestColServiceQueryDocumentsStream2Params object
// with the ability to set a context for a request.
func NewRestColServiceQueryDocumentsStream2ParamsWithContext(ctx context.Context) *RestColServiceQueryDocumentsStream2Params {
	return &RestColServiceQueryDocumentsStream2Params{
		Context: ctx,
	}
}

// NewRestColServiceQueryDocumentsStream2ParamsWithHTTPClient creates a new RestColServiceQueryDocumentsStream2Params object
// with the ability to set a custom HTTPClient for a request.
func NewRestColServiceQueryDocumentsStream2ParamsWithHTTPClient(client *http.Client) *RestColServiceQueryDocumentsStream2Params {
	return &RestColServiceQueryDocumentsStream2Params{
		HTTPClient: client,
	}
}

/*
RestColServiceQueryDocumentsStream2Params contains all the parameters to send to the API endpoint

	for the rest col service query documents stream2 operation.

	Typically these are written to a http.Request.
*/
type RestColServiceQueryDocumentsStream2Params struct {

	// CollectionID.
	CollectionID string

	/* EndedAt.

	   endedAt specifies when is the ended timeframe of the query

	   Format: date-time
	*/
	EndedAt *strfmt.DateTime

	/* FollowUpMode.

	   if on, the service would keep watch new coming docs
	*/
	FollowUpMode *bool

	// ProjectID.
	ProjectID *string

	/* Queryfields.

	   dot-concatenated fields, ex: fielda.fieldb.fieldc
	*/
	Queryfields *string

	// SinceTs.
	//
	// Format: date-time
	SinceTs *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the rest col service query documents stream2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RestColServiceQueryDocumentsStream2Params) WithDefaults() *RestColServiceQueryDocumentsStream2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the rest col service query documents stream2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RestColServiceQueryDocumentsStream2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithTimeout(timeout time.Duration) *RestColServiceQueryDocumentsStream2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithContext(ctx context.Context) *RestColServiceQueryDocumentsStream2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithHTTPClient(client *http.Client) *RestColServiceQueryDocumentsStream2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectionID adds the collectionID to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithCollectionID(collectionID string) *RestColServiceQueryDocumentsStream2Params {
	o.SetCollectionID(collectionID)
	return o
}

// SetCollectionID adds the collectionId to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetCollectionID(collectionID string) {
	o.CollectionID = collectionID
}

// WithEndedAt adds the endedAt to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithEndedAt(endedAt *strfmt.DateTime) *RestColServiceQueryDocumentsStream2Params {
	o.SetEndedAt(endedAt)
	return o
}

// SetEndedAt adds the endedAt to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetEndedAt(endedAt *strfmt.DateTime) {
	o.EndedAt = endedAt
}

// WithFollowUpMode adds the followUpMode to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithFollowUpMode(followUpMode *bool) *RestColServiceQueryDocumentsStream2Params {
	o.SetFollowUpMode(followUpMode)
	return o
}

// SetFollowUpMode adds the followUpMode to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetFollowUpMode(followUpMode *bool) {
	o.FollowUpMode = followUpMode
}

// WithProjectID adds the projectID to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithProjectID(projectID *string) *RestColServiceQueryDocumentsStream2Params {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithQueryfields adds the queryfields to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithQueryfields(queryfields *string) *RestColServiceQueryDocumentsStream2Params {
	o.SetQueryfields(queryfields)
	return o
}

// SetQueryfields adds the queryfields to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetQueryfields(queryfields *string) {
	o.Queryfields = queryfields
}

// WithSinceTs adds the sinceTs to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) WithSinceTs(sinceTs *strfmt.DateTime) *RestColServiceQueryDocumentsStream2Params {
	o.SetSinceTs(sinceTs)
	return o
}

// SetSinceTs adds the sinceTs to the rest col service query documents stream2 params
func (o *RestColServiceQueryDocumentsStream2Params) SetSinceTs(sinceTs *strfmt.DateTime) {
	o.SinceTs = sinceTs
}

// WriteToRequest writes these params to a swagger request
func (o *RestColServiceQueryDocumentsStream2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param collectionId
	if err := r.SetPathParam("collectionId", o.CollectionID); err != nil {
		return err
	}

	if o.EndedAt != nil {

		// query param endedAt
		var qrEndedAt strfmt.DateTime

		if o.EndedAt != nil {
			qrEndedAt = *o.EndedAt
		}
		qEndedAt := qrEndedAt.String()
		if qEndedAt != "" {

			if err := r.SetQueryParam("endedAt", qEndedAt); err != nil {
				return err
			}
		}
	}

	if o.FollowUpMode != nil {

		// query param followUpMode
		var qrFollowUpMode bool

		if o.FollowUpMode != nil {
			qrFollowUpMode = *o.FollowUpMode
		}
		qFollowUpMode := swag.FormatBool(qrFollowUpMode)
		if qFollowUpMode != "" {

			if err := r.SetQueryParam("followUpMode", qFollowUpMode); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if o.Queryfields != nil {

		// query param queryfields
		var qrQueryfields string

		if o.Queryfields != nil {
			qrQueryfields = *o.Queryfields
		}
		qQueryfields := qrQueryfields
		if qQueryfields != "" {

			if err := r.SetQueryParam("queryfields", qQueryfields); err != nil {
				return err
			}
		}
	}

	if o.SinceTs != nil {

		// query param sinceTs
		var qrSinceTs strfmt.DateTime

		if o.SinceTs != nil {
			qrSinceTs = *o.SinceTs
		}
		qSinceTs := qrSinceTs.String()
		if qSinceTs != "" {

			if err := r.SetQueryParam("sinceTs", qSinceTs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
