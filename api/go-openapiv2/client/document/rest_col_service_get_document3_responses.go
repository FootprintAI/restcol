// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/footprintai/restcol/api/go-openapiv2/models"
)

// RestColServiceGetDocument3Reader is a Reader for the RestColServiceGetDocument3 structure.
type RestColServiceGetDocument3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestColServiceGetDocument3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRestColServiceGetDocument3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRestColServiceGetDocument3Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRestColServiceGetDocument3OK creates a RestColServiceGetDocument3OK with default headers values
func NewRestColServiceGetDocument3OK() *RestColServiceGetDocument3OK {
	return &RestColServiceGetDocument3OK{}
}

/*
RestColServiceGetDocument3OK describes a response with status code 200, with default header values.

A successful response.
*/
type RestColServiceGetDocument3OK struct {
	Payload *models.APIGetDocumentResponse
}

// IsSuccess returns true when this rest col service get document3 o k response has a 2xx status code
func (o *RestColServiceGetDocument3OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rest col service get document3 o k response has a 3xx status code
func (o *RestColServiceGetDocument3OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rest col service get document3 o k response has a 4xx status code
func (o *RestColServiceGetDocument3OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rest col service get document3 o k response has a 5xx status code
func (o *RestColServiceGetDocument3OK) IsServerError() bool {
	return false
}

// IsCode returns true when this rest col service get document3 o k response a status code equal to that given
func (o *RestColServiceGetDocument3OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rest col service get document3 o k response
func (o *RestColServiceGetDocument3OK) Code() int {
	return 200
}

func (o *RestColServiceGetDocument3OK) Error() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/{documentId}][%d] restColServiceGetDocument3OK  %+v", 200, o.Payload)
}

func (o *RestColServiceGetDocument3OK) String() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/{documentId}][%d] restColServiceGetDocument3OK  %+v", 200, o.Payload)
}

func (o *RestColServiceGetDocument3OK) GetPayload() *models.APIGetDocumentResponse {
	return o.Payload
}

func (o *RestColServiceGetDocument3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIGetDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestColServiceGetDocument3Default creates a RestColServiceGetDocument3Default with default headers values
func NewRestColServiceGetDocument3Default(code int) *RestColServiceGetDocument3Default {
	return &RestColServiceGetDocument3Default{
		_statusCode: code,
	}
}

/*
RestColServiceGetDocument3Default describes a response with status code -1, with default header values.

An unexpected error response.
*/
type RestColServiceGetDocument3Default struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this rest col service get document3 default response has a 2xx status code
func (o *RestColServiceGetDocument3Default) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this rest col service get document3 default response has a 3xx status code
func (o *RestColServiceGetDocument3Default) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this rest col service get document3 default response has a 4xx status code
func (o *RestColServiceGetDocument3Default) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this rest col service get document3 default response has a 5xx status code
func (o *RestColServiceGetDocument3Default) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this rest col service get document3 default response a status code equal to that given
func (o *RestColServiceGetDocument3Default) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the rest col service get document3 default response
func (o *RestColServiceGetDocument3Default) Code() int {
	return o._statusCode
}

func (o *RestColServiceGetDocument3Default) Error() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/{documentId}][%d] RestColService_GetDocument3 default  %+v", o._statusCode, o.Payload)
}

func (o *RestColServiceGetDocument3Default) String() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/collections/{collectionId}/{documentId}][%d] RestColService_GetDocument3 default  %+v", o._statusCode, o.Payload)
}

func (o *RestColServiceGetDocument3Default) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *RestColServiceGetDocument3Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
