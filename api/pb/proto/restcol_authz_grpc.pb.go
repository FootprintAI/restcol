// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/restcol_authz.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RestColAuthZ_Lookup_FullMethodName           = "/restcol.api.RestColAuthZ/Lookup"
	RestColAuthZ_Enforce_FullMethodName          = "/restcol.api.RestColAuthZ/Enforce"
	RestColAuthZ_GrantPermission_FullMethodName  = "/restcol.api.RestColAuthZ/GrantPermission"
	RestColAuthZ_RevokePermission_FullMethodName = "/restcol.api.RestColAuthZ/RevokePermission"
)

// RestColAuthZClient is the client API for RestColAuthZ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestColAuthZClient interface {
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error)
	GrantPermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error)
	RevokePermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error)
}

type restColAuthZClient struct {
	cc grpc.ClientConnInterface
}

func NewRestColAuthZClient(cc grpc.ClientConnInterface) RestColAuthZClient {
	return &restColAuthZClient{cc}
}

func (c *restColAuthZClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, RestColAuthZ_Lookup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColAuthZClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error) {
	out := new(EnforceResponse)
	err := c.cc.Invoke(ctx, RestColAuthZ_Enforce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColAuthZClient) GrantPermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error) {
	out := new(PermissionResponse)
	err := c.cc.Invoke(ctx, RestColAuthZ_GrantPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restColAuthZClient) RevokePermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error) {
	out := new(PermissionResponse)
	err := c.cc.Invoke(ctx, RestColAuthZ_RevokePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestColAuthZServer is the server API for RestColAuthZ service.
// All implementations must embed UnimplementedRestColAuthZServer
// for forward compatibility
type RestColAuthZServer interface {
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	Enforce(context.Context, *EnforceRequest) (*EnforceResponse, error)
	GrantPermission(context.Context, *PermissionRequest) (*PermissionResponse, error)
	RevokePermission(context.Context, *PermissionRequest) (*PermissionResponse, error)
	mustEmbedUnimplementedRestColAuthZServer()
}

// UnimplementedRestColAuthZServer must be embedded to have forward compatible implementations.
type UnimplementedRestColAuthZServer struct {
}

func (UnimplementedRestColAuthZServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedRestColAuthZServer) Enforce(context.Context, *EnforceRequest) (*EnforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedRestColAuthZServer) GrantPermission(context.Context, *PermissionRequest) (*PermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantPermission not implemented")
}
func (UnimplementedRestColAuthZServer) RevokePermission(context.Context, *PermissionRequest) (*PermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePermission not implemented")
}
func (UnimplementedRestColAuthZServer) mustEmbedUnimplementedRestColAuthZServer() {}

// UnsafeRestColAuthZServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestColAuthZServer will
// result in compilation errors.
type UnsafeRestColAuthZServer interface {
	mustEmbedUnimplementedRestColAuthZServer()
}

func RegisterRestColAuthZServer(s grpc.ServiceRegistrar, srv RestColAuthZServer) {
	s.RegisterService(&RestColAuthZ_ServiceDesc, srv)
}

func _RestColAuthZ_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColAuthZServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColAuthZ_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColAuthZServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColAuthZ_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColAuthZServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColAuthZ_Enforce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColAuthZServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColAuthZ_GrantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColAuthZServer).GrantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColAuthZ_GrantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColAuthZServer).GrantPermission(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestColAuthZ_RevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestColAuthZServer).RevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestColAuthZ_RevokePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestColAuthZServer).RevokePermission(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestColAuthZ_ServiceDesc is the grpc.ServiceDesc for RestColAuthZ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestColAuthZ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restcol.api.RestColAuthZ",
	HandlerType: (*RestColAuthZServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _RestColAuthZ_Lookup_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _RestColAuthZ_Enforce_Handler,
		},
		{
			MethodName: "GrantPermission",
			Handler:    _RestColAuthZ_GrantPermission_Handler,
		},
		{
			MethodName: "RevokePermission",
			Handler:    _RestColAuthZ_RevokePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/restcol_authz.proto",
}
