// Code generated by go-swagger; DO NOT EDIT.

package rest_col_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rest col service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rest col service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RestColServiceCreateCollection(params *RestColServiceCreateCollectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceCreateCollectionOK, error)

	RestColServiceCreateData(params *RestColServiceCreateDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceCreateDataOK, error)

	RestColServiceGetCollection(params *RestColServiceGetCollectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceGetCollectionOK, error)

	RestColServiceGetData(params *RestColServiceGetDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceGetDataOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
RestColServiceCreateCollection rest col service create collection API
*/
func (a *Client) RestColServiceCreateCollection(params *RestColServiceCreateCollectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceCreateCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestColServiceCreateCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestColService_CreateCollection",
		Method:             "POST",
		PathPattern:        "/v1/collections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestColServiceCreateCollectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestColServiceCreateCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestColServiceCreateCollectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RestColServiceCreateData rest col service create data API
*/
func (a *Client) RestColServiceCreateData(params *RestColServiceCreateDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceCreateDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestColServiceCreateDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestColService_CreateData",
		Method:             "POST",
		PathPattern:        "/v1/collections/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestColServiceCreateDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestColServiceCreateDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestColServiceCreateDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RestColServiceGetCollection rest col service get collection API
*/
func (a *Client) RestColServiceGetCollection(params *RestColServiceGetCollectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceGetCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestColServiceGetCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestColService_GetCollection",
		Method:             "GET",
		PathPattern:        "/v1/collections/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestColServiceGetCollectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestColServiceGetCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestColServiceGetCollectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RestColServiceGetData rest col service get data API
*/
func (a *Client) RestColServiceGetData(params *RestColServiceGetDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestColServiceGetDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestColServiceGetDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestColService_GetData",
		Method:             "GET",
		PathPattern:        "/v1/collections/{cid}/{did}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestColServiceGetDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestColServiceGetDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestColServiceGetDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
