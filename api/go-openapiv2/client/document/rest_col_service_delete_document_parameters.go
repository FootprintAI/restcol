// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRestColServiceDeleteDocumentParams creates a new RestColServiceDeleteDocumentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRestColServiceDeleteDocumentParams() *RestColServiceDeleteDocumentParams {
	return &RestColServiceDeleteDocumentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRestColServiceDeleteDocumentParamsWithTimeout creates a new RestColServiceDeleteDocumentParams object
// with the ability to set a timeout on a request.
func NewRestColServiceDeleteDocumentParamsWithTimeout(timeout time.Duration) *RestColServiceDeleteDocumentParams {
	return &RestColServiceDeleteDocumentParams{
		timeout: timeout,
	}
}

// NewRestColServiceDeleteDocumentParamsWithContext creates a new RestColServiceDeleteDocumentParams object
// with the ability to set a context for a request.
func NewRestColServiceDeleteDocumentParamsWithContext(ctx context.Context) *RestColServiceDeleteDocumentParams {
	return &RestColServiceDeleteDocumentParams{
		Context: ctx,
	}
}

// NewRestColServiceDeleteDocumentParamsWithHTTPClient creates a new RestColServiceDeleteDocumentParams object
// with the ability to set a custom HTTPClient for a request.
func NewRestColServiceDeleteDocumentParamsWithHTTPClient(client *http.Client) *RestColServiceDeleteDocumentParams {
	return &RestColServiceDeleteDocumentParams{
		HTTPClient: client,
	}
}

/*
RestColServiceDeleteDocumentParams contains all the parameters to send to the API endpoint

	for the rest col service delete document operation.

	Typically these are written to a http.Request.
*/
type RestColServiceDeleteDocumentParams struct {

	// CollectionID.
	CollectionID string

	// DocumentID.
	DocumentID string

	// ProjectID.
	ProjectID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the rest col service delete document params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RestColServiceDeleteDocumentParams) WithDefaults() *RestColServiceDeleteDocumentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the rest col service delete document params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RestColServiceDeleteDocumentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) WithTimeout(timeout time.Duration) *RestColServiceDeleteDocumentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) WithContext(ctx context.Context) *RestColServiceDeleteDocumentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) WithHTTPClient(client *http.Client) *RestColServiceDeleteDocumentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectionID adds the collectionID to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) WithCollectionID(collectionID string) *RestColServiceDeleteDocumentParams {
	o.SetCollectionID(collectionID)
	return o
}

// SetCollectionID adds the collectionId to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) SetCollectionID(collectionID string) {
	o.CollectionID = collectionID
}

// WithDocumentID adds the documentID to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) WithDocumentID(documentID string) *RestColServiceDeleteDocumentParams {
	o.SetDocumentID(documentID)
	return o
}

// SetDocumentID adds the documentId to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) SetDocumentID(documentID string) {
	o.DocumentID = documentID
}

// WithProjectID adds the projectID to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) WithProjectID(projectID *string) *RestColServiceDeleteDocumentParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the rest col service delete document params
func (o *RestColServiceDeleteDocumentParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *RestColServiceDeleteDocumentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param collectionId
	if err := r.SetPathParam("collectionId", o.CollectionID); err != nil {
		return err
	}

	// path param documentId
	if err := r.SetPathParam("documentId", o.DocumentID); err != nil {
		return err
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
